package main

import (
	"fmt"
	"os"
	"strconv"
	"strings"
)

func toIntSlice(s string, separator string) []int {
	var result []int
	for _, v := range strings.Split(s, separator) {
		i, _ := strconv.Atoi(v)
		result = append(result, i)
	}
	return result
}

type Position struct {
	y int
	x int
}

func main() {
	rawInput, _ := os.ReadFile("../inputs/2024/8.txt")
	input := string(rawInput)

	input2 := `............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............`

	fmt.Println(input2)

	antennas := map[string][]Position{}
	antinodes := map[string]bool{}

	maxY, maxX := 0, 0

	for y, line := range strings.Split(input, "\n") {
		if line == "" {
			continue
		}
		maxY = y
		for x, char := range strings.Split(line, "") {
			maxX = x
			if char != "." {
				_, ok := antennas[char]
				if ok {
					antennas[char] = append(antennas[char], Position{y, x})
				} else {
					antennas[char] = []Position{{y, x}}
				}
			}
		}
	}

	fmt.Println(maxY, maxX)

	for _, positions := range antennas {
		fmt.Println(positions)
		for _, pos1 := range positions {
			for _, pos2 := range positions {
				if pos1 != pos2 {
					targetY := pos1.y + (pos1.y - pos2.y)
					targetX := pos1.x + (pos1.x - pos2.x)

					if targetY >= 0 && targetY <= maxY && targetX >= 0 && targetX <= maxX {
						antinodes[fmt.Sprintf("%d,%d", targetY, targetX)] = true
					}
				}
			}
		}
	}

	fmt.Println(len(antinodes))

}
