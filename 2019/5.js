const state = [3,225,1,225,6,6,1100,1,238,225,104,0,1102,67,92,225,1101,14,84,225,1002,217,69,224,101,-5175,224,224,4,224,102,8,223,223,101,2,224,224,1,224,223,223,1,214,95,224,101,-127,224,224,4,224,102,8,223,223,101,3,224,224,1,223,224,223,1101,8,41,225,2,17,91,224,1001,224,-518,224,4,224,1002,223,8,223,101,2,224,224,1,223,224,223,1101,37,27,225,1101,61,11,225,101,44,66,224,101,-85,224,224,4,224,1002,223,8,223,101,6,224,224,1,224,223,223,1102,7,32,224,101,-224,224,224,4,224,102,8,223,223,1001,224,6,224,1,224,223,223,1001,14,82,224,101,-174,224,224,4,224,102,8,223,223,101,7,224,224,1,223,224,223,102,65,210,224,101,-5525,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,1101,81,9,224,101,-90,224,224,4,224,102,8,223,223,1001,224,3,224,1,224,223,223,1101,71,85,225,1102,61,66,225,1102,75,53,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,8,226,226,224,102,2,223,223,1005,224,329,1001,223,1,223,1108,677,677,224,1002,223,2,223,1006,224,344,101,1,223,223,1007,226,677,224,102,2,223,223,1005,224,359,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,374,101,1,223,223,1108,677,226,224,1002,223,2,223,1005,224,389,1001,223,1,223,108,226,677,224,102,2,223,223,1006,224,404,101,1,223,223,1108,226,677,224,102,2,223,223,1005,224,419,101,1,223,223,1008,677,677,224,102,2,223,223,1005,224,434,101,1,223,223,7,677,226,224,1002,223,2,223,1005,224,449,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,464,1001,223,1,223,107,226,677,224,1002,223,2,223,1006,224,479,1001,223,1,223,107,677,677,224,102,2,223,223,1005,224,494,1001,223,1,223,1008,226,677,224,102,2,223,223,1006,224,509,1001,223,1,223,1107,677,226,224,102,2,223,223,1005,224,524,101,1,223,223,1007,226,226,224,1002,223,2,223,1006,224,539,1001,223,1,223,107,226,226,224,102,2,223,223,1006,224,554,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,569,1001,223,1,223,7,226,677,224,102,2,223,223,1006,224,584,1001,223,1,223,8,677,226,224,102,2,223,223,1005,224,599,101,1,223,223,1107,677,677,224,1002,223,2,223,1005,224,614,101,1,223,223,8,226,677,224,102,2,223,223,1005,224,629,1001,223,1,223,7,226,226,224,1002,223,2,223,1006,224,644,1001,223,1,223,108,226,226,224,1002,223,2,223,1006,224,659,101,1,223,223,1107,226,677,224,1002,223,2,223,1006,224,674,101,1,223,223,4,223,99,226];

let head = 0;
let terminated = false;

// const state = [3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99];

const step = () => {
  const opcode = state[head] % 100;
  const parameterMode1 = state[head] >= 100 ? parseInt(String(state[head]).charAt(String(state[head]).length - 3), 10) : 0;
  const parameterMode2 = state[head] >= 1000 ? parseInt(String(state[head]).charAt(String(state[head]).length - 4), 10) : 0;
  // const parameterMode3 = state[head] >= 10000 ? parseInt(String(state[head]).charAt(String(state[head]).length - 5), 10) : 0;

  // console.log(opcode, parameterMode1, parameterMode2);

  if (Number.isNaN(opcode)) {
    console.log('Error');
    process.exit(1);
  }

  const par1 = parameterMode1 === 0 ? state[state[head + 1]] : state[head + 1];
  const par2 = parameterMode2 === 0 ? state[state[head + 2]] : state[head + 2];
  // const par3 = parameterMode2 === 0 ? state[state[head + 3]] : state[head + 3];

  // console.log(par1, par2);


  if (state[head] === 99) {
    terminated = true;
    return;
  }
  if (opcode === 1) { // addition
    state[state[head + 3]] = par1 + par2;
    head += 4;
  } else if (opcode === 2) { // multiplication
    state[state[head + 3]] = par1 * par2;
    head += 4;
  } else if (opcode === 3) { // input
    state[state[head + 1]] = 5; // fixed input for now
    head += 2;
  } else if (opcode === 4) { // output
    console.log(state[state[head + 1]]);
    head += 2;
  } else if (opcode === 5) { // jump if true
    head = par1 === 0 ? head + 3 : par2;
  } else if (opcode === 6) { // jump if false
    head = par1 === 0 ? par2: head + 3;
  } else if (opcode === 7) { // less than
    state[state[head + 3]] = par1 < par2 ? 1 : 0;
    head += 4;
  } else if (opcode === 8) { // equals
    state[state[head + 3]] = par1 === par2 ? 1 : 0;
    head += 4;
  }

  // console.log(state);
}

while(!terminated) {
  step();
}


// step();
// step();
// step();
// step();
